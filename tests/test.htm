<!DOCTYPE html>
<html>
<head>
	<title>JigLibJS Tests</title>
</head>
<body>
	<script type="text/javascript">
		// define classes
		function do_loop(a)
		{
			var x=0;
			do 
			{
				x++;
			}
			while(--a);
			
			return new Date();
		}
		
		function for_loop(a)
		{
			var x=0;
			for(var i=0;i<a; i++)
			{
				x++;
			}
			
			return new Date();
		}

		function for_loop_flipped(a)
		{
			var x=0;
			for(var i=a; i--;)
			{
				x++;
			}
			
			return new Date();
		}
		
		function duffs_device(a)
		{
			var x = 0;
			var n = a / 26;
			var caseTest = a % 8;	
			
			do {
			
				switch (caseTest)
				{
					case 0: x++;
					case 7: x++;
					case 6: x++;
					case 5: x++;
					case 4: x++;
					case 3: x++;
					case 2: x++;
					case 1: x++;
				}
				caseTest=0;
			}
			while (--n > 0);
			
			return new Date();
		}
		
		function duffs_2(a)
		{
			var x=0;
			var out=[];
			
			var n = a % 8;
			while (n--)
			{
				x++;
			}
			
			n = parseInt(a / 8);
			while (n--)
			{
				x++;
				x++;
				x++;
				x++;
				x++;
				x++;
				x++;
				x++;
			}
			return new Date();
		}
		
		function test()
		{
			var fort = new Date() - for_loop(100000000);
			var forflipt = new Date() - for_loop_flipped(100000000);
			var dot = new Date() - do_loop(100000000);
			var dufft = new Date() - duffs_device(100000000);
			var duff2t = new Date() - duffs_2(100000000);
			
			var out = 'for loop: '+fort+'<br />flipped for loop: '+forflipt+'<br />do loop: '+dot+'<br />duffs device: '+dufft+'<br />duffs2: '+duff2t;
			document.getElementById('debug').innerHTML = out;
		}
	</script> 
	
	<div>
		<button onClick="test();">test loops</button>
	</div>
	<br />
	
	<script type="text/javascript">
		Number.prototype.valueOf = function() { return this.toFixed(2); }; 
		function testnum()
		{
			var a = 1.234245285;
			for (var x in Number.prototype)
			{
				alert(x);
				alert(Number.prototype[x]);
			}
			alert(a);
		}
	</script>
	
	<div>
		<button onClick="testnum();">test number override</button>
	</div>
	<br />
	
	<script type="text/javascript">
		function ttf_0(a)
		{
			var start = new Date();
			var x;
			for (i=0;i<1000000;i++)
			{
				a++;
				x = a*12345;
				//x = a/0.123;
				x = Math.sqrt(a);
				x = Math.pi * a;
			}
			return new Date() - start;
		}
		
		function ttf_1(a)
		{
			var start = new Date();
			var x;
			a = parseFloat(a.toFixed(2));
			for (i=0;i<1000000;i++)
			{
				a++;
				x = a*12345;
				x = a/5;
				x = Math.sqrt(a);
				x = Math.pi * a;
			}
			return new Date() - start;
		}
		
		function ttf_2(a)
		{
			var start = new Date();
			var x;
			a = parseInt(a.toFixed(0));
			for (i=0;i<1000000;i++)
			{
				a++;
				x = a*12345;
				x = a/5;
				x = Math.sqrt(a);
				x = Math.pi * a;
			}
			return new Date() - start;
		}
		
		function testtofixed()
		{
			var a = 1.2342452852345987654;
			var a_0 = ttf_0(a);
			var a_1 = ttf_1(a);
			var a_2 = ttf_2(a);
			document.getElementById('debug').innerHTML = 'normal precision (1.234245285): '+a_0+'<br />toFixed(3) (1.234): '+a_1+'<br />int: '+a_2;
		}
	</script>
	
	<div>
		<button onClick="testtofixed();">test fixed precision</button>
	</div>
	<br />
	
	<!-- Vector3D test -->
	<script type="text/javascript">
		var v3d0=function(x,y,z,w){ 
			if(x) this.x=x;
			if(y) this.y=y;
			if(z) this.z=z;
			if(w) this.w=w;
		}
		v3d0.prototype.x=0;
		v3d0.prototype.y=0;
		v3d0.prototype.z=0;
		v3d0.prototype.w=0;
		
		var v3d1=function(x,y,z,w){ 
			var n = arguments.length;
			if (n==0) return;
			else if (n>=3) { this.x=x; this.y=y; this.z=z; }
			if (n==4) this.w=w;
		}
		v3d1.prototype.x=0;
		v3d1.prototype.y=0;
		v3d1.prototype.z=0;
		v3d1.prototype.w=0;
		
		var v3d2=function(x,y,z,w){ 
			if (x==null) return;
			this.x=x;
			this.y=y;
			this.z=z;
			if (w) this.w=w;
		}
		v3d2.prototype.x=0;
		v3d2.prototype.y=0;
		v3d2.prototype.z=0;
		v3d2.prototype.w=0;
		
		var v3d3=function(x,y,z,w){ 
			if (x==null) return;
			this.v[0]=x;
			this.v[1]=y;
			this.v[2]=z;
			if (w) this.v[3]=w;
		}
		v3d3.prototype.v=[0,0,0,0];
		
		var v3d4=function(x,y,z,w){ 
			if (x) this.v[0]=x;
			if (y) this.v[1]=y;
			if (z) this.v[2]=z;
			if (w) this.v[3]=w;
		}
		v3d4.prototype.v=[0,0,0,0];

		var v3d5=function(x,y,z,w){ 
			if (x) this.v[0]=x;
			if (y) this.v[1]=y;
			if (z) this.v[2]=z;
			if (w) this.v[3]=w;
		}
		v3d5.prototype.v=[0,0,0,0];
		v3d5.prototype.__defineGetter__('x', function() { return this.v[0]; });
		v3d5.prototype.__defineGetter__('y', function() { return this.v[1]; });
		v3d5.prototype.__defineGetter__('z', function() { return this.v[2]; });
		v3d5.prototype.__defineGetter__('w', function() { return this.v[3]; });
		v3d5.prototype.__defineSetter__('x', function(x) { this.v[0] = x; });
		v3d5.prototype.__defineSetter__('y', function(y) { this.v[1] = y; });
		v3d5.prototype.__defineSetter__('z', function(z) { this.v[2] = z; });
		v3d5.prototype.__defineSetter__('w', function(w) { this.v[3] = w; });
		
		function testv3d()
		{
			var start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d0(); }
			var out = 'VERSION 0:<br />time with no arguments: '+(new Date()-start);
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d0(1,2,3); }
			out += '<br />time with 3 arguments: '+(new Date()-start);
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d0(1,2,3,4); }
			out += '<br />time with 4 arguments: '+(new Date()-start);
			
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d1(); }
			out += '<br /><br />VERSION 1:<br />time with no arguments: '+(new Date()-start);
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d1(1,2,3); }
			out += '<br />time with 3 arguments: '+(new Date()-start);
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d1(1,2,3,4); }
			out += '<br />time with 4 arguments: '+(new Date()-start);
			
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d2(); }
			out += '<br /><br />VERSION 2:<br />time with no arguments: '+(new Date()-start);
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d2(1,2,3); }
			out += '<br />time with 3 arguments: '+(new Date()-start);
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d2(1,2,3,4); }
			out += '<br />time with 4 arguments: '+(new Date()-start);
			
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d3(); }
			out += '<br /><br />VERSION 3:<br />time with no arguments: '+(new Date()-start);
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d3(1,2,3); }
			out += '<br />time with 3 arguments: '+(new Date()-start);
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d3(1,2,3,4); }
			out += '<br />time with 4 arguments: '+(new Date()-start);
			
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d4(); }
			out += '<br /><br />VERSION 4:<br />time with no arguments: '+(new Date()-start);
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d4(1,2,3); }
			out += '<br />time with 3 arguments: '+(new Date()-start);
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d4(1,2,3,4); }
			out += '<br />time with 4 arguments: '+(new Date()-start);
			
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d5(); }
			out += '<br /><br />VERSION 5:<br />time with no arguments: '+(new Date()-start);
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d5(1,2,3); }
			out += '<br />time with 3 arguments: '+(new Date()-start);
			
			start = new Date();
			for (var i=0; i<1000000; i++) { var v=new v3d5(1,2,3,4); }
			out += '<br />time with 4 arguments: '+(new Date()-start);

			document.getElementById('debug').innerHTML = out;
		}
	</script>
	<div>
		<button onClick="testv3d();">test Vector3D constructor</button>
	</div>
	<br />
	
	<script type="text/javascript">
		function testBoolConv()
		{
			var out = 'NaN equates to ';
			out += (NaN) ? 'true' : 'false';
			
			out += '<br />0 equates to ';
			out += (0) ? 'true' : 'false';
			
			out += '<br />null equates to ';
			out += (null) ? 'true' : 'false';
			
			out += '<br />1 equates to ';
			out += (1) ? 'true' : 'false';
			
			document.getElementById('debug').innerHTML = out;
		}
	</script>
	<div>
		<button onClick="testBoolConv();">test boolean conversions</button>
	</div>
	<br />
	
	
	<script type="text/javascript">
		function testFunc(i)
		{
			this.a=i;
		}
		testFunc.prototype.a = 0;
		testFunc.prototype.f = function() { if(!arguments.length) return this.a; else this.a = arguments[0]; };

		var testFunc2=function(i)
		{
			this.v[0] = i;
		}
		testFunc2.prototype.v = [0];
		testFunc2.prototype.__defineGetter__('val', function() { return this.v[0]; });
		testFunc2.prototype.__defineSetter__('val', function(inV) { this.v[0] = inV; });
		
		function testFuncs(i)
		{
			var func = new testFunc(i);
			var out = 'func.a='+func.a;
			out += '<br />func.f()='+func.f();
			out += '<br />doing func.f(78)...';
			func.f(78);
			out += '<br />func.a='+func.a;
			out += '<br />func.f()='+func.f();

			out += '<br /><br /><br />';
			
			var func2 = new testFunc2(i);
			out += 'func2.v[0]='+func2.v[0];
			out += '<br />func2.val='+func2.val;
			out += '<br />doing func2.val = 78...';
			func2.val = 78;
			out += '<br />func2.v[0]='+func2.v[0];
			out += '<br />func2.val='+func2.val;

			document.getElementById('debug').innerHTML = out;
		}
	</script>
	<div>
		<button onClick="testFuncs(69);">function getter/setter</button>
	</div>
	<br />
	
	<script type="text/javascript">
		var simpleVO = function(a,b,c,d)
		{
			this.a = a;
			this.b = b;
			this.c = c;
			this.d = d;
		}
		simpleVO.prototype.a = 0;
		simpleVO.prototype.b = 0;
		simpleVO.prototype.c = 0;
		simpleVO.prototype.d = 0;
		
		var complexVO = function(a,b,c,d)
		{
			this.a = a;
			this.b = b;
			this.c = c;
			this.d = d;
		}
		complexVO.prototype.a = 0;
		complexVO.prototype.b = 0;
		complexVO.prototype.c = 0;
		complexVO.prototype.d = 0;
		complexVO.prototype.f1 = function() { return this.a * 123456; }
		complexVO.prototype.f2 = function() { return this.b * 123456; }
		complexVO.prototype.f3 = function() { return this.c * 123456; }
		complexVO.prototype.f4 = function() { return this.d * 123456; }
		complexVO.prototype.f5 = function() { return this.a + this.a; }
		complexVO.prototype.f6 = function() { return this.a + this.b; }
		complexVO.prototype.f7 = function() { return this.a + this.c; }
		complexVO.prototype.f8 = function() { return this.a + this.d; }
		complexVO.prototype.f9 = function() { return this.b + this.a; }
		complexVO.prototype.f10 = function() { return this.b + this.b; }
		complexVO.prototype.f11 = function() { return this.b + this.c; }
		complexVO.prototype.f12 = function() { return this.b + this.d; }
		complexVO.prototype.f13 = function() { return this.c + this.a; }
		complexVO.prototype.f14 = function() { return this.c + this.b; }
		complexVO.prototype.f15 = function() { return this.c + this.c; }
		complexVO.prototype.f16 = function() { return this.c + this.d; }
		complexVO.prototype.f17 = function() { return this.d + this.a; }
		complexVO.prototype.f18 = function() { return this.d + this.b; }
		complexVO.prototype.f19 = function() { return this.d + this.c; }
		complexVO.prototype.f20 = function() { return this.d + this.d; }
		
		function testSimpleVOs()
		{
			var arr = [];
			var start = new Date();
			
			for (var i=1000000; i--;)
			{
				arr.push(new simpleVO(i,i,i,i));
			}
			var t1 = new Date() - start;
			arr = null;
			
			document.getElementById('debug').innerHTML = 'simple VO: '+t1;
		}

		function testComplexVOs()
		{
			var arr = [];
			var start = new Date();
			
			for (var i=1000000; i--;)
			{
				arr.push(new complexVO(i,i,i,i));
			}
			var t2 = new Date() - start;
			arr = null;

			document.getElementById('debug').innerHTML = 'complex VO: '+t2;
		}

		function testArrays()
		{
			var arr = [];
			var start = new Date();
			
			for (var i=1000000; i--;)
			{
				arr.push([i,i,i,i]);
			}
			var t2 = new Date() - start;
			arr = null;

			document.getElementById('debug').innerHTML = 'arrays: '+t2;
		}

		function testObjects()
		{
			var arr = [];
			var start = new Date();
			
			for (var i=1000000; i--;)
			{
				arr.push({x:i,y:i,z:i,w:i});
			}
			var t2 = new Date() - start;
			arr = null;

			document.getElementById('debug').innerHTML = 'arrays: '+t2;
		}

		function testAllVOs()
		{
			var out='';
			testSimpleVOs();
			out += document.getElementById('debug').innerHTML+'<br />';
			testComplexVOs();
			out += document.getElementById('debug').innerHTML+'<br />';
			testArrays();
			out += document.getElementById('debug').innerHTML+'<br />';
			testObjects();
			out += document.getElementById('debug').innerHTML+'<br />';
			testAllVOs();
			out += document.getElementById('debug').innerHTML+'<br />';
		}
	</script>
	<div>
		<button onClick="testSimpleVOs();">simple VOs</button>
		<button onClick="testComplexVOs();">complex VOs</button>
		<button onClick="testArrays();">arrays</button>
		<button onClick="testObjects();">objects</button>
	</div>
	<br />
	
	<script type="text/javascript">
		function sqrt1()
		{
			var start = new Date();
			var x;
			var i=99999999;
			do { x=Math.sqrt(i); } while (i--);
			return new Date()-start;
		}
		function sqrt2()
		{
			var start = new Date();
			var x;
			var s=Math.sqrt;
			var i=99999999;
			do { x=s(i); } while (i--);
			return new Date()-start;
		}
		function testMathCaching()
		{
			var a=sqrt1();
			var b=sqrt2();
			var out = 'cached: '+b+'<br />normal: '+a;
			document.getElementById('debug').innerHTML = out;
		}
	</script>
	<div>
		<button onClick="testMathCaching();">caching of Math</button>
	</div>
	<br />
	
	<script type="text/javascript">
		function mathMax1()
		{
			var start = new Date();
			var x;
			var i=99999999;
			var mm=Math.max;
			do { x=mm(i, 55555555); } while (i--);
			return new Date()-start;
		}
		function mathMax2()
		{
			var start = new Date();
			var x;
			var i=99999999;
			do { if(i>55555555)x=55555555; else x=i; } while (i--);
			return new Date()-start;
		}
		function mathMax3()
		{
			var start = new Date();
			var x;
			var i=99999999;
			do { x=(i>55555555)?55555555:i; } while (i--);
			return new Date()-start;
		}
		function testMathMaxVsIf()
		{
			var a=mathMax1();
			var b=mathMax2();
			var c=mathMax3();
			var out = 'Math.max: '+a+'<br />if else: '+b+'<br />ternary: '+c;
			document.getElementById('debug').innerHTML = out;
		}
	</script>
	<div>
		<button onClick="testMathMaxVsIf();">Math.max vs ifelse vs ternary</button>
	</div>
	<br />
	
	<script type="text/javascript">
		function mathMin1()
		{
			var start = new Date();
			var x;
			var i=99999999;
			var mm=Math.min;
			do { 
				x=mm(i-55555555, 55555555-i); 
			} while (i--);
			return new Date()-start;
		}
		function mathMin2()
		{
			var start = new Date();
			var x;
			var i=99999999;
			do { 
				var a=i-55555555;
				var b=55555555-i;
				x=(a<b) ? a : b; 
			} while (i--);
			return new Date()-start;
		}
		function testMathMinVsTernary()
		{
			var a=mathMin1();
			var b=mathMin2();
			var out = 'Math.min: '+a+'<br />ternary: '+b;
			document.getElementById('debug').innerHTML = out;
		}
	</script>
	<div>
		<button onClick="testMathMinVsTernary();">Math.min vs ternary</button>
	</div>
	<br />
	
	
	<script type="text/javascript">
		function isnanTest()
		{
			var start = new Date();
			var x;
			var i=99999999;
			do { 
				x=(!isNaN(i)) ? i : 0; 
			} while (i--);
			return new Date()-start;
		}
		function boolConvTest()
		{
			var start = new Date();
			var x;
			var i=99999999;
			do { 
				x=(i) ? i : 0; 
			} while (i--);
			return new Date()-start;
		}
		function equalsnanTest()
		{
			var start = new Date();
			var x;
			var i=99999999;
			do { 
				x=(i!=NaN) ? i : 0; 
			} while (i--);
			return new Date()-start;
		}
		function testIsNaNVsBoolConv()
		{
			var a=isnanTest();
			var b=boolConvTest();
			var c=equalsnanTest();
			var out = 'isNaN: '+a+'<br />boolean conversion: '+b+'<br />==NaN: '+c;
			document.getElementById('debug').innerHTML = out;
		}
	</script>
	<div>
		<button onClick="testIsNaNVsBoolConv();">isNaN vs boolean conversion vs ==NaN</button>
	</div>
	<br />
	
	<div id="debug">&nbsp;</div>
</body>
</html>
